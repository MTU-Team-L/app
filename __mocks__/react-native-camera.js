import React from 'react';
import {View} from 'react-native';

const sampleResponse = [{bounds: {origin: {y: 127.37640380859375, x: 79.48877716064453}, size: {height: 14.498126983642578, width: 80.42393493652344}}, type: 'block', value: 'Jace Beleren', components: [{components: [{bounds: {origin: {y: 127.37640380859375, x: 79.48877716064453}, size: {height: 14.498126983642578, width: 34.60099792480469}}, value: 'Jace', type: 'element'}, {bounds: {origin: {y: 130.48313903808594, x: 119.70074462890625}, size: {height: 9.32022476196289, width: 40.21196746826172}}, value: 'Beleren', type: 'element'}], value: 'Jace Beleren', type: 'line', bounds: {size: {width: 80.42393493652344, height: 14.498126983642578}, origin: {x: 79.48877716064453, y: 127.37640380859375}}}]}, {bounds: {origin: {y: 311.7097473144531, x: 101.93266296386719}, size: {height: 8.28464412689209, width: 54.23939895629883}}, type: 'block', value: 'Planeswalker', components: [{components: [{bounds: {origin: {y: 311.7097473144531, x: 101.93266296386719}, size: {height: 8.28464412689209, width: 54.23939895629883}}, value: 'Planeswalker', type: 'element'}], value: 'Planeswalker', type: 'line', bounds: {size: {width: 54.23939895629883, height: 8.28464412689209}, origin: {x: 101.93266296386719, y: 311.7097473144531}}}]}, {bounds: {origin: {y: 312.7453308105469, x: 171.13465881347656}, size: {height: 8.28464412689209, width: 16.832916259765625}}, type: 'block', value: 'Jace', components: [{components: [{bounds: {origin: {y: 312.7453308105469, x: 171.13465881347656}, size: {height: 8.28464412689209, width: 16.832916259765625}}, value: 'Jace', type: 'element'}], value: 'Jace', type: 'line', bounds: {size: {width: 16.832916259765625, height: 8.28464412689209}, origin: {x: 171.13465881347656, y: 312.7453308105469}}}]}, {bounds: {origin: {y: 332.4213562011719, x: 119.70074462890625}, size: {height: 13.462546348571777, width: 90.71072387695312}}, type: 'block', value: 'ach player drawy& card', components: [{components: [{bounds: {origin: {y: 335.528076171875, x: 119.70074462890625}, size: {height: 9.32022476196289, width: 17.76807975769043}}, value: 'ach', type: 'element'}, {bounds: {origin: {y: 333.4569396972656, x: 139.33914184570312}, size: {height: 11.391386032104492, width: 23.379051208496094}}, value: 'player', type: 'element'}, {bounds: {origin: {y: 333.4569396972656, x: 163.6533660888672}, size: {height: 11.391386032104492, width: 29.925186157226562}}, value: 'drawy&', type: 'element'}, {bounds: {origin: {y: 332.4213562011719, x: 194.51370239257812}, size: {height: 12.426965713500977, width: 15.897754669189453}}, value: 'card', type: 'element'}], value: 'ach player drawy& card', type: 'line', bounds: {size: {width: 90.71072387695312, height: 13.462546348571777}, origin: {x: 119.70074462890625, y: 332.4213562011719}}}]}, {bounds: {origin: {y: 363.48876953125, x: 92.58104705810547}, size: {height: 9.32022476196289, width: 124.37655639648438}}, type: 'block', value: 'CITarget player draws a cand.', components: [{components: [{bounds: {origin: {y: 363.48876953125, x: 92.58104705810547}, size: {height: 9.32022476196289, width: 49.56359100341797}}, value: 'CITarget', type: 'element'}, {bounds: {origin: {y: 365.5599365234375, x: 145.88528442382812}, size: {height: 7.249063491821289, width: 20.573566436767578}}, value: 'player', type: 'element'}, {bounds: {origin: {y: 365.5599365234375, x: 170.19949340820312}, size: {height: 5.177902698516846, width: 19.638402938842773}}, value: 'draws', type: 'element'}, {bounds: {origin: {y: 363.48876953125, x: 191.70822143554688}, size: {height: 9.32022476196289, width: 6.5461344718933105}}, value: 'a', type: 'element'}, {bounds: {origin: {y: 363.48876953125, x: 200.1246795654297}, size: {height: 9.32022476196289, width: 16.832916259765625}}, value: 'cand.', type: 'element'}], value: 'CITarget player draws a cand.', type: 'line', bounds: {size: {width: 124.37655639648438, height: 9.32022476196289}, origin: {x: 92.58104705810547, y: 363.48876953125}}}]}, {bounds: {origin: {y: 380.05804443359375, x: 120.63591003417969}, size: {height: 10.355805397033691, width: 141.20947265625}}, type: 'block', value: 'Target player puts the top wenty cards', components: [{components: [{bounds: {origin: {y: 382.12921142578125, x: 120.63591003417969}, size: {height: 8.28464412689209, width: 22.443889617919922}}, value: 'Target', type: 'element'}, {bounds: {origin: {y: 381.0936279296875, x: 146.82044982910156}, size: {height: 9.32022476196289, width: 20.573566436767578}}, value: 'player', type: 'element'}, {bounds: {origin: {y: 383.164794921875, x: 170.19949340820312}, size: {height: 6.213482856750488, width: 14.962593078613281}}, value: 'puts', type: 'element'}, {bounds: {origin: {y: 381.0936279296875, x: 188.90274047851562}, size: {height: 7.249063491821289, width: 10.286783218383789}}, value: 'the', type: 'element'}, {bounds: {origin: {y: 383.164794921875, x: 201.99501037597656}, size: {height: 6.213482856750488, width: 12.157106399536133}}, value: 'top', type: 'element'}, {bounds: {origin: {y: 382.12921142578125, x: 216.9575958251953}, size: {height: 7.249063491821289, width: 23.379051208496094}}, value: 'wenty', type: 'element'}, {bounds: {origin: {y: 381.0936279296875, x: 243.1421356201172}, size: {height: 7.249063491821289, width: 18.7032413482666}}, value: 'cards', type: 'element'}], value: 'Target player puts the top wenty cards', type: 'line', bounds: {size: {width: 141.20947265625, height: 10.355805397033691}, origin: {x: 120.63591003417969, y: 380.05804443359375}}}]}, {bounds: {origin: {y: 390.4138488769531, x: 93.51620483398438}, size: {height: 8.28464412689209, width: 149.6259307861328}}, type: 'block', value: 'O:of his or her library into his or her', components: [{components: [{bounds: {origin: {y: 390.4138488769531, x: 93.51620483398438}, size: {height: 8.28464412689209, width: 34.60099792480469}}, value: 'O:of', type: 'element'}, {bounds: {origin: {y: 390.4138488769531, x: 130.9226837158203}, size: {height: 7.249063491821289, width: 8.416458129882812}}, value: 'his', type: 'element'}, {bounds: {origin: {y: 390.4138488769531, x: 143.07980346679688}, size: {height: 7.249063491821289, width: 6.5461344718933105}}, value: 'or', type: 'element'}, {bounds: {origin: {y: 390.4138488769531, x: 153.3665771484375}, size: {height: 7.249063491821289, width: 10.286783218383789}}, value: 'her', type: 'element'}, {bounds: {origin: {y: 390.4138488769531, x: 167.39401245117188}, size: {height: 8.28464412689209, width: 22.443889617919922}}, value: 'library', type: 'element'}, {bounds: {origin: {y: 392.4850158691406, x: 193.57855224609375}, size: {height: 4.142322063446045, width: 13.092268943786621}}, value: 'into', type: 'element'}, {bounds: {origin: {y: 390.4138488769531, x: 209.47630310058594}, size: {height: 6.213482856750488, width: 9.3516206741333}}, value: 'his', type: 'element'}, {bounds: {origin: {y: 392.4850158691406, x: 222.56857299804688}, size: {height: 4.142322063446045, width: 6.5461344718933105}}, value: 'or', type: 'element'}, {bounds: {origin: {y: 391.4494323730469, x: 232.85536193847656}, size: {height: 5.177902698516846, width: 10.286783218383789}}, value: 'her', type: 'element'}], value: 'O:of his or her library into his or her', type: 'line', bounds: {size: {width: 149.6259307861328, height: 8.28464412689209}, origin: {x: 93.51620483398438, y: 390.4138488769531}}}]}, {bounds: {origin: {y: 400.7696533203125, x: 117.8304214477539}, size: {height: 7.249063491821289, width: 37.4064826965332}}, type: 'block', value: 'graveyard.', components: [{components: [{bounds: {origin: {y: 400.7696533203125, x: 117.8304214477539}, size: {height: 7.249063491821289, width: 37.4064826965332}}, value: 'graveyard.', type: 'element'}], value: 'graveyard.', type: 'line', bounds: {size: {width: 37.4064826965332, height: 7.249063491821289}, origin: {x: 117.8304214477539, y: 400.7696533203125}}}]}, {bounds: {origin: {y: 412.1610412597656, x: 160.84786987304688}, size: {height: 10.355805397033691, width: 50.49875259399414}}, type: 'block', value: 'Ak Bril', components: [{components: [{bounds: {origin: {y: 414.2322082519531, x: 160.84786987304688}, size: {height: 8.28464412689209, width: 25.24937629699707}}, value: 'Ak', type: 'element'}, {bounds: {origin: {y: 412.1610412597656, x: 193.57855224609375}, size: {height: 7.249063491821289, width: 17.76807975769043}}, value: 'Bril', type: 'element'}], value: 'Ak Bril', type: 'line', bounds: {size: {width: 50.49875259399414, height: 10.355805397033691}, origin: {x: 160.84786987304688, y: 412.1610412597656}}}]}];

// eslint-disable-next-line import/no-mutable-exports
let triggerTextRecognition = () => {};

const RNCamera = ({onTextRecognized}) => {
  triggerTextRecognition = async () => {
    await onTextRecognized({textBlocks: sampleResponse});
  };

  return <View/>;
};

RNCamera.Constants = {
  Type: {
    back: 'mock-camera-back'
  },
  FlashMode: {
    on: 'mock-on'
  }
};

export {RNCamera, triggerTextRecognition};
